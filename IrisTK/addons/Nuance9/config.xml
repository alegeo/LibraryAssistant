<?xml version="1.0"?>            <!-- XML version -->
<?xml-stylesheet type="text/xsl" href="SWIrecConfig.xsl"?>

<!--

****************************License********************************

Copyright (c) 1995-2006 by Nuance Communications, Inc. All rights reserved.

Nuance, Inc. provides this document without representation or warranty of
any kind. Nuance, Inc. reserves the right to revise this document and to
change the information contained in this document without further notice.

Dialog Modules, OpenSpeech, Productivity Without Boundaries, ScanSoft, the
ScanSoft logo, SMARTRecognizer, SpeechCare, Speechify, SpeechSecure,
SpeechSpot, SpeechSite, SpeechWorks, the SpeechWorks logo, and SpeechWorksHere
are trademarks or registered trademarks of Nuance Communications, Inc. or its 
licensors in the United States and/or other countries.  This document may also 
contain other trademarks, which are the property of their respective owners.

Without limiting the rights under copyright reserved above, no part of this
document may be reproduced, stored in or introduced into a retrieval system,
or transmitted in any form or by any means, including, without limitation,
electronic, mechanical, photocopying, recording, or otherwise, without the
prior written permission of Nuance Communications, Inc.

-->

<!-- Define the structure for the XML -->


  <!-- *************** Organization of Config Parameters   ************* -->

  <!-- * Parameters related to INITIALIZATION                          * -->
  <!-- * Parameters related to CACHING                                 * -->
  <!-- * Parameters related to ENDPOINTER                              * -->
  <!-- * Parameters related to LEARN                                   * -->
  <!-- * Parameters related to ACCURACY AND LANGUAGE MODELING          * -->
  <!-- * Parameters related to PERFORMANCE                             * -->
  <!-- * Parameters related to DEBUGGING                               * -->
  <!-- * NEVER CHANGE WITHOUT Nuance authorization                     * -->


<SWIrecConfig version="1.0.0">
<lang name="default">

  <!-- ***************************************************************** -->
  <!-- * Parameters related to INITIALIZATION                          * -->
  <!-- ***************************************************************** -->
  
  <!-- 1:enable speech mode in rec result when NOMATCH; 0:disable this mode -->
  <param name="swirec_result_enable_speech_mode">
    <value>0</value>
  </param>
    
  <!-- 0:include "*#ABCD" in DTMF builtin grammars; 1:exclude "*#ABCD" -->
  <param name="swirec_builtin_grammar_full_dtmf_mode">
    <value>0</value>
  </param>
  
  <!-- Controls how long the recognizer should wait after the end of 
       the prompt for the caller to speak.    -->
  <param name="timeout">
     <value>7000</value>
  </param>

  <!-- Controls how much silence (milliseconds) after a successful recognition 
       is needed to conclude that a caller is finished. -->
  <param name="completetimeout">
     <value>0</value>
  </param>

  <!-- Controls the level of confidence to determine when the 
       application needs to confirm. Values 0-1000. -->
  <param name="confidencelevel">
     <value>0</value>
  </param>

  <!-- Controls the length (milliseconds) of a period of silence after 
       callers have spoken to conclude that they finished. This timer is
       also known as the &quot;after end of speech&quot; timer. 
       For optimal performance, set this parameter per grammar, as follows:
         500  for short utterances (yes/no, hot word)
	 750 for simple queries
         1200 to 2500 For digit strings and long utterances (listings) -->
  <param name="incompletetimeout">
     <value>1500</value>
  </param>

  <param name="swirec_retain_grammar_import_separator">
     <value>0</value>
  </param>

  <param name="swirec_waveform_logging_uniform_name">
     <value>0</value>
  </param>

  <!-- Controls sensitivity of the speech detector when 
       looking for speech. -->
  <param name="sensitivity">
     <value>0.5</value>
  </param>

  <!-- Controls the trade-off between processing and accuracy. -->
  <param name="speedvsaccuracy">
     <value>0</value>
  </param>

  <!-- Sets the confidence threshold for recognition results 
       computed while the selective_barge_in mode is active. -->
  <param name="swirec_selective_barge_in_conf_thresh">
    <value>700</value>
  </param>

  <!-- Sets the confidence threshold for recognition results 
       computed while the magic word endpointer mode is active. -->
  <param name="swirec_magic_word_conf_thresh">
    <value>700</value>
  </param>

  <!-- For Nuance use only. Sets mode of the INTERNAL endpointer. -->
  <!-- OSR sets this param as needed for different audio input. -->
  <!-- For example, Aurora data requires that the endpointer be disabled. -->
  <param name="swirec_internal_endpointer_mode">
     <value>end_only</value>
  </param>

  <!-- This parameter is ignored and is reserved for future use. -->
  <param name="swirec_audio_environment">
    <value>default</value>
  </param>

  <!-- Amount of speech, in milliseconds, that the 
       recognizer sees before forcing end of speech. -->
  <param name="swirec_max_speech_duration">
     <value>40000</value>
  </param>

  <!-- Number of entries to return in the nbest list. If &gt;5, additional
       CPU cycles will be needed. -->
  <param name="swirec_nbest_list_length">
     <value>1</value>
  </param>

  <!-- Defines the format of the audio being supplied to the recognizer.  -->
  <param name="swirec_audio_media_type">
      <value>audio/basic;rate=8000</value>
      <value>audio/L16;rate=8000</value>
  </param>
  
  <!-- Controls whether to log the SWIrslt event -->
  <param name="swirec_log_xmlresult">
     <value>true</value>
  </param>

  <!-- Add a Nuance grammar key to the XML result. -->
  <param name="swirec_extra_nbest_keys">
  	 <value>SWI_literalTimings</value>
     <value>SWI_meaning</value>
     <value>SWI_literal</value>
     <value>SWI_grammarName</value>
  </param>

  <!-- Ignore the media type that is returned by the server 
       upon fetching a grammar.   -->
  <param name="swirec_ignore_grammar_media_type">
    <value>1</value>
  </param>

   <!-- log grammarID in the GRNM token of SWIrcst event -->
  <param name="swirec_enable_grammar_id_logging">
    <value>0</value>
  </param>

  
  <!-- Max parses evaluated for each literal and grammar
       Valid values are 1-99 -->

  <param name="swirec_max_parses_per_literal">
    <value>10</value>
  </param>

  <!-- Set of characters that are allowed in a sampa pronunciation -->

  <param name="swirec_sampa_characters">
    <value>#123459:;=?@ACDEHIJMNOQRSTUVYZ_abdefghijklmnoprstuvwxyz{~</value>
  </param>
  
  <!-- Max source grammar size (in bytes) that is allowed to be loaded 
       by the online system or non-sgc tools -->
  <param name="swirec_max_source_grammar_size">
    <value>-1</value>
  </param>
  
  <!-- Max training grammar size (in bytes) that is allowed to be loaded 
       by the online system or non-sgc tools -->
  <param name="swirec_max_training_grammar_size">
    <value>-1</value>
  </param>

  <!-- For Nuance use only: Set this to 0 to enable support for answer grammars -->
  <param name="swirec_suppress_answer_grammar">
    <value>1</value>
  </param>

  

  <!-- ****************************************************************** -->
  <!-- * New License Enforcement initialization parameters              * -->
  <!-- ****************************************************************** -->

  <!-- How many osr_swirec licenses will be checked out during SWIrecInit() -->
  <param name="swirec_license_ports">
    <value>4</value>
  </param>

  <!-- How many osr_swiep licenses will be checked out during SWIepInit() -->
  <param name="swiep_license_ports">
    <value>4</value>
  </param>

  <!-- Identifies a threshold of licenses, above which will be considered an overdraft. -->
  <param name="swirec_license_ports_overdraft_thresh">
    <value>-1</value>
  </param>
  
  <!-- Identifies a threshold of licenses, above which will be considered an overdraft. -->
  <param name="swiep_license_ports_overdraft_thresh">
    <value>-1</value>
  </param>

  <!-- Identifies the features to be checked out by the recognizer -->
  <param name="swirec_licensing_features">
    <value>osr_nl_u, osr_rec_u, dtmf</value>
  </param>

  <!-- Identifies the features to be checked out by the endpointer -->
  <param name="swiep_licensing_features">
    <value/>
  </param>

  <!-- Upon detection of network communicate failure with license server, wait grace 
       period milliseconds before disabling features; maximum 3600 -->
  <param name="swilicense_grace_period">
    <value>3600</value>
  </param>

  <!-- ***************************************************************** -->
  <!-- * Parameters related to CACHING                                 * -->
  <!-- ***************************************************************** -->

  <!-- Amount of memory the internal cache needs to take up before we
       start expiring grammars, in MB -->
  <param name="swirec_memory_cache_size">
     <value>100</value>
  </param>

  <!-- When maximum cache size is reached, what must the cache size be
       reduced to to stop expiring grammars, in MB.  Defaults to 85% of
       above size -->
       <!--
          &lt;param name=&quot;swirec_memory_cache_low_water_mark&quot;&gt;
          &lt;value&gt;34&lt;/value&gt;
          &lt;/param&gt;
       -->

  <!-- Minimum size of compiled grammar to cache in KB -->
  <param name="swirec_memory_cache_min_entry_size">
     <value>0</value>
  </param>

  <!-- Level to compile newly cached grammars -->
  <param name="swirec_default_optimization">
     <value>6</value>
  </param>

  <!-- Level to compile often-used grammars -->
  <param name="swirec_full_optimization">
     <value>9</value>
  </param>

  <!-- Defines &quot;often-used&quot; grammar. It is the number of times
       a grammar is accessed from a cache before the
       grammar is automatically optimized using the level
       in swirec_disk_cache_full_optimization -->
  <param name="swirec_hits_before_full_optimize">
     <value>3</value>
  </param>

  <!-- User dictionary cache size in MB. The default value is 0 i.e. caching is disabled by default. -->
  <param name="swirec_max_dict_cache_size">
     <value>0</value>
  </param>

  <!-- Defines whether the disk cache should be used. -->
  <param name="swirec_disk_cache_enabled">
     <value>1</value>
  </param>

  <!-- Directory name for the disk cache.  -->
  <!-- If relative, the file path is relative to the containing configuration file. -->
  <param name="swirec_disk_cache_directory">
     <value>./GrammarCache</value>
  </param>

  <!-- Maximum size of the disk cache in MB -->
  <param name="swirec_disk_cache_size">
     <value>500</value>
  </param>

  <!-- Minimum size of compiled grammar to cache in KB -->
  <param name="swirec_disk_cache_min_entry_size">
     <value>0</value>
  </param>

  <!-- When maximum cache size is reached, what must the cache size be
       reduced to to stop expiring grammars, in MB.   -->
  <param name="swirec_disk_cache_low_water_mark">
     <value>400</value>
  </param>

  <!-- Address a http proxy server to use, e.g. 127.0.0.1 -->
  <param name="swirec_inet_proxy_server">
     <value/>
  </param>

  <!-- Port of the http proxy server to use, e.g. &quot;8080&quot;;
       set this only if swirec_inet_proxy_server is set -->
  <param name="swirec_inet_proxy_server_port">
     <value/>
  </param>

  <!-- Delimiters which are used to separate fields in a grammar
       key value query string.  The default is &quot;;&amp;&quot;, to allow &quot;x=y;z=d&quot; or
       &quot;x=y&amp;z=d&quot; -->
  <param name="swirec_inet_query_delimiters">
     <value>;&amp;</value>
  </param>


  <!-- ***************************************************************** -->
  <!-- * Parameters related to ENDPOINTER                              * -->
  <!-- ***************************************************************** -->

  <!-- This parameter is ignored and is reserved for future use. -->
  <param name="swiep_audio_environment">
    <value>default</value>
  </param>

  <!-- Backoff is a safety margin to ensure the begin-of-speech is captured.
       The margin extends the BOS marker slightly (milliseconds) sooner in 
       the audio sample. -->
  <param name="swiep_BOS_backoff">
    <value>200</value>
  </param>

  <!-- Backoff is a safety margin to ensure the end-of-speech is captured.
       The margin extends the EOS marker slightly (milliseconds) later in 
       the audio sample. -->
  <param name="swiep_EOS_backoff">
    <value>240</value>
  </param>

  <!-- Inform the speech detector about the audio format being 
       supplied to the recognizer.  -->
  <param name="swiep_audio_media_type">
      <value>audio/basic;rate=8000</value>
      <value>audio/L16;rate=8000</value>
  </param>

  <!-- Controls how loudly the caller must speak to interrupt 
       prompts (barge-in) in order for speech to be detected. -->
  <param name="swiep_in_prompt_sensitivity_percent">
     <value>50</value>
  </param>

  <!-- Turns barge-in on/off. If a dialog state is not using barge-in, then set this parameter to 0.
  The input received by the endpointer differs depending on whether barge-in is enabled or not.
  When barge-in is enabled, the ratio of silence to speech sent to the endpointer increases
  considerably; also, the sound that follows the first recognition call is usually the residual
  prompt or background noise. When barge-in is not enabled, the first sound processed is usually
  the callers speech. Setting this parameter ensures that the endpointer is optimized
  for either condition. 
  -->
  <param name="bargein">
     <value>1</value>
  </param>

  <!-- Sets the speech detector into various endpointer modes. -->
  <param name="swiep_mode">
     <value>begin_only</value>
  </param>

  <!-- Must be set if SWIepRead is used by platform -->
  <param name="swiep_use_swiep_read">
     <value>1</value>
  </param>

  <!-- Disable pre-endpointed waveform logging entirely. -->
  <param name="swiep_suppress_waveform_logging">
     <value>1</value>
  </param>

  <!-- Disable logging of endpointer events. -->
  <param name="swiep_suppress_event_logging">
     <value>0</value>
  </param>

  <!-- Max channels to simultaneously save pre-endpointed waveforms. -->
  <param name="swiep_waveform_logging_max_channels">
     <value>-1</value>
  </param>

  <!-- Timeout (seconds) for inactive channel when max_channels
       is set -->
  <param name="swiep_waveform_logging_channel_timeout">
     <value>300</value>
  </param>

  <!-- Prevent thrashing on tiny input buffers, each of which
       has a constant fixed cost.  Too big hurts response time;
       too small increases cpu; 800 recommended for 8khz ulaw
       legal values 1 to 1999 -->
  <param name="swiep_min_bytes_to_process">
    <value>800</value>
  </param>

  <!-- Controls how much memory is spent holding samples waiting for read
       to catch up to write; in msecs -->
  <param name="swiep_max_read_lag">
     <value>10000</value>
  </param>

  <!-- suppresses barge-in for this many msecs; can stop early barge-ins -->
  <param name="swiep_suppress_barge_in_time">
     <value>0</value>
  </param>

  <!-- ***************************************************************** -->
  <!-- * Advanced endpointer configuration                               -->
  <!-- * In general, you should not need to adjust these parameters; the -->
  <!--* endpointer is optimized to provide the best performance with     -->
  <!--* default settings. Nuance will continue to revamp these settings  -->
  <!--* based on field results.                                          -->
  <!-- ***************************************************************** -->

  <!-- ** Start of the call
    Nuance provides parameters that allow the endpointer to reject speech-like residual
    echoes, which are typically strongest at the start of the call. ** -->
  
  <!-- This parameter specifies the speech level (on a dBm scale) of the most quiet utterance
  that can trigger the endpointer at the start of the first recognition. This parameter keeps
  the endpointer from being triggered by prompt echoes at the beginning of the first recognition,
  before the echo cancellation might have converged. This minimum level gradually decreases to
  the value specified by swiep_bargein_min_noise_floor according to the timing values specified by
  swiep_bargein_initial_hold_seconds and swiep_bargein_initial_decay_seconds. This parameter is used only
  when bargein is set to 1. -->
  <param name="swiep_bargein_initial_noise_floor">
    <value>-25</value>
  </param>

  <!-- This parameter specifies how long (in seconds) the initial noise floor set by
  swiep_bargein_initial_noise_floor is held. After this time, the initial noise floor starts
  to transition to the value specified in swiep_bargein_min_noise_floor. The transition lasts for the
  duration specified in swiep_bargein_initial_decay_seconds. This parameter is used only when bargein
  is set to 1. --> 
  <param name="swiep_bargein_initial_hold_seconds">
    <value>1.5</value>
  </param>

  <!-- This parameter specifies the duration (in seconds) during which the minimum noise floor transitions
  from the value specified in swiep_bargein_initial_noise_floor to the value specified in 
  swiep_bargein_min_noise_floor. This parameter is used only when bargein is set to 1. -->
  <param name="swiep_bargein_initial_decay_seconds">
    <value>0.5</value>
  </param>

  <!-- This parameter specifies whether to automatically truncate the initial hold time when
    the endpointer is notified that the prompt has completed -->
    <param name="swiep_stop_initial_hold_on_prompt_done">
      <value>1</value>
    </param>

  <!-- This parameter specifies the absolute minimum level of speech (on a dBm scale) that can trigger
    the endpointer. This parameter is always used, regardless of the value in parameter bargein. -->
  <param name="swiep_bargein_min_noise_floor">
    <value>-45</value>
  </param>

  <!-- Detection sensitivity
    generalized sensitivity settings are offered through 'sensitivity' and 'swiep_in_prompt_sensitivity_percent'.
    Sensitivity can be fine-tuned through adjustment of parameters in this section. -->

  <!-- Set this parameter to 0 to disable 'sensitivity' and 'swiep_in_prompt_sensitivity_percent'
    before tuning the remaining parameters in this section.
  -->
  <param name="swiep_use_sensitivity">
    <value>1</value>
  </param>

  <!-- This parameter is the primary parameter controlling the sensitivity of the endpointer.
  Increasing it requires a larger change in energy to trigger the endpointer, and decreasing
  it makes the endpointer more sensitive. -->
  <param name="swiep_threshold_snr">
    <value>14</value>
  </param>

  <!-- The value of this parameter is added to the threshold specified by parameter
  swiep_threshold_snr to detect the first start-of-speech in a call. A larger positive
  number increases the detection threshold for the first utterance. After one successful
  recognition, this parameter is ignored. This parameter does not apply to the detection of
  end-of-speech -->
  <param name="swiep_threshold_snr_first_offset">
    <value>3</value>
  </param>
 
  <!-- The value of this parameter is applied to the threshold specified by parameter
  swiep_threshold_snr to detect the end-of-speech. A larger negative number makes it
  more likely that phrases ending weakly are classified as speech. -->
  <param name="swiep_threshold_snr_end_offset">
    <value>-3</value>
  </param>

  <!-- The value of this parameter specifies the search range for a smart back-up that
    looks for low-energy consonants (msec) -->
  <param name="swiep_consonant_search_width">
    <value>550</value>
  </param>

  <!-- The value of this parameter specifies the difference between the measured phrase strength
  and the minimum strength required to trigger the endpointer, that may represent a consonant. -->
  <param name="swiep_consonant_offset">
    <value>3</value>
  </param>

  <!-- ** Timing
  This section describes new and updated timing parameters used to determine the
  begin-of-speech and end-of-speech. ** -->

  <!-- To trigger the start-of-speech, a certain percentage of frames
  (specified by swiep_start_percentage) during a time window
  (specified by swiep_start_seconds) must be above the threshold specified by
  swiep_threshold_snr. The default values mean that the duration of speech activity required
  to determine that speech has started is about 0.045 seconds. -->
  <param name="swiep_start_percentage">
    <value>0.15</value>
  </param>
  <param name="swiep_start_seconds">
    <value>0.3</value>
  </param>

  <!-- To trigger the end-of-speech, a certain percentage of frames (specified by swiep_end_percentage)
  during a time window (specified by incompletetimeout) must be below the detection thresholds. -->
  <param name="swiep_end_percentage">
    <value>1.0</value>
  </param>

  <!-- ** Adapting speech models
  The endpointer keeps an adapting speech model of the signal level for the current caller.
  To trigger the endpointer, the current signal must be reasonably close to or above the adapting
  speech model. This section describes the parameters that control the adapting speech models.**  -->

  <!-- If the spectral estimate of the input signal is lower than the speech model of the speaker, it
  has to be within the threshold specified by this parameter to trigger the endpointer. For example, if
  the speech model of the speaker is 46 and parameter swiep_voice_threshold is set to 5, the input signal
  must be 41 or higher to trigger the endpointer. Increasing this value (typically to 10) will let more
  quiet utterances and weak onsets trigger the endpointer when the speech model for the current caller
  is loud.  -->
  <param name="swiep_voice_threshold">
    <value>5</value>
  </param>
  
  <!-- This parameter provides an initial estimate (on a dBm scale) of how loud the speaker will be.
  This is used by the endpointer when comparing the current level of the signal to an internally-adapting
  model of the speech frames that have been processed so far. Increasing this parameter can lead to fewer
  false triggers, and decreasing it can lead to fewer misses. This parameter is independent of the
  swiep_threshold_snr and noise floor-related parameters. -->
  <param name="swiep_initial_voice_bin">
    <value>-35</value>
  </param>

  <!-- For Nuance use only. -->
  <param name="swiep_dbg_verbosity">
    <value>0</value>
  </param>

  <!-- ***************************************************************** -->
  <!-- * Parameters related to HOT INSERT and Grammar Preloading-->
  <!-- ***************************************************************** -->

  <!--Number of seconds between attempts to update baseline data -->
  <param name="swirec_update_interval">
    <value>600</value>
  </param>

  <!-- If this file exists, hot insert will NOT be done, use this to 
      temporarily stop hot insert while a group of files is updated. -->
  <param name="swirec_update_lockfile">
    <value>lockfile.dat</value>
  </param>

  <!-- If this is set, preloaded grammars will never be removed from  
       the cache, even if they normally would expire or SWIrecGrammarFree() is called -->
  <param name="swirec_lock_preload_grammars">
    <value>0</value>
  </param>

  <!-- Set default properties used for SWIrecGrammarLoad,Activate,Free(), See
       Properties (VXIinet) in Reference Manual for configurable properties -->
  <param name="swirec_default_loadfree_properties">
    <value/>
    <!-- Example:
      <value>swirec_mem_flush_on_free=1</value>
      <value>inet.maxage=0</value>
     -->
  </param>


  <!-- ***************************************************************** -->
  <!-- * Parameters related to LEARN                                   * -->
  <!-- ***************************************************************** -->

  <!-- For Nuance use only. -->
  <param name="swirec_learn_timeout">
     <value/>
  </param>

  <!-- For Nuance use only. -->
  <param name="swirec_learn_server">
     <value/>
  </param>

  <!-- ***************************************************************** -->
  <!-- * Parameters related to ACCURACY AND LANGUAGE MODELING          * -->
  <!-- ***************************************************************** -->

  <!-- For Nuance use only. Sets a maximum number of models (e.g. male/female).
       Typically never changed. -->
  <param name="swirec_num_parallel_models">
     <value>2</value>
  </param>

  <!-- Language model scale. Scale used to get language model within same
       dynamic range as acoustic models. -->
  <param name="swirec_lmweight">
     <value>1.0</value>
  </param>

  <!-- For Nuance use only: Weight of lm during rescore phase.  Absolute value (not dependent on lmweight). -->
  <param name="swirec_lmrescore_weight">
    <value>2.0</value>
  </param>

  <!-- For Nuance use only -->
  <param name="swirec_max_arc_cost">
     <value>6.5</value>
  </param>

  <!-- For Nuance use only -->
  <param name="swirec_max_epsilon_arc_cost">
     <value>6.0</value>
  </param>

  <!-- ***************************************************************** -->
  <!-- * SSM defaults                                                  * -->
  <!-- ***************************************************************** -->

  <!-- If confidence of ssm is below this number, do not return result.
	Range:0.0-1.0 -->
  <param name="swissm_confidence_threshold">
     <value>0.0</value>
  </param>


  <!-- ***************************************************************** -->
  <!-- * Word level confidence parameters                              * -->
  <!-- ***************************************************************** -->

  <!-- Enabled/Disabled word level confidence estimates -->
  <param name="swirec_word_confidence_enabled">
     <value>1</value>
  </param>

  <!-- Word posterior pruning. Controls the density of the word lattice 
       by pruning all word hypothesis with an initial posterior estimate
       larger than this value. Also relates to the amount of CPU spent
       computing the word lattice an ultimately the word level confidence
       estimates -->
  <param name="swirec_word_posterior_pruning">
     <value>7.0</value>
  </param>

  <!-- Controls the density of the lattice used for computing word consensus
       hypothesis. Need to keep this value relatively low to mimize CPU -->
  <param name="swirec_word_lattice_density">
     <value>100.0</value>
  </param>

  <!-- ***************************************************************** -->
  <!-- * Slot level confidence parameters                              * -->
  <!-- ***************************************************************** -->

  <!-- Used to calculate SP sentence confidence -->
  <param name="swirec_slot_confidence_norm_factor">
     <value>1.0</value>
  </param>

  <!-- Interpolation factor to combine OSR and SP slot confidence values -->
  <param name="swirec_combined_slot_confidence_factor">
     <value>1.0</value>
  </param>

  <!-- ***************************************************************** -->
  <!-- * Parameters related to PERFORMANCE                             * -->
  <!-- ***************************************************************** -->

  <!-- Speed vs Accuracy tradeoff. Valid settings are idle, normal, busy, pegged and on. 
       Other parameters that use one of several values based on the setting of this 
       parameter will choose their value in the order above (idle=first_value, normal=
       second_value, busy=third_value, and pegged=fourth_value. 
       &quot;On&quot; means the load_adjusted speed vs accuracy is dynamic. -->
  <param name="swirec_load_adjusted_speedvsaccuracy">
     <value>on</value>
  </param>

  <!-- Maximum number of dictionary pronunciations to use per word. -->
  <param name="swirec_max_dict_prons">
     <value>8</value>
  </param>

  <!-- Maximum number of automatically generated pronunciations per word. -->
  <param name="swirec_max_auto_prons">
     <value>1</value>
  </param>

  <!-- For Nuance use only.  Controls the second pass re-scoring stage. 
       The will only execute on N-best entries from the first pass that are 
       within the specified delta from each other. Concept: if the first pass 
       gives a big delta, you can be fairly confident that the second 
         N-best is not the correct answer, and a second pass re-score 
         will probably not force it to the top either. Higher numbers
       can increase accuracy, but will slow response time. -->
  <param name="swirec_max_rescore_delta">
     <value>500</value>
     <value>500</value>
     <value>500</value>
     <value>500</value>
  </param>

  <!-- For Nuance use only. Related to the second pass re-scoring stage. 
       Controls the absolute time spent for rescoring. -->
  <param name="swirec_max_rescore_time">
     <value>20000</value>
     <value>20000</value>
     <value>20000</value>
     <value>20000</value>
  </param>

  <!-- The maximum amount of time that the recognizer spends 
       to recognize an answer. Milliseconds. -->
  <param name="swirec_max_cpu_time">
     <value>20000</value>
  </param>

  <!-- The maximum time of the search phase of recognition. Milliseconds. -->
  <param name="swirec_max_search_time">
     <value>5000</value>
  </param>

  <!-- Defines an approximate usage percentage as &quot;normal&quot; CPU load. 
       When usage is normal, the recognizer can dynamically use more CPU
       to improve accuracy. -->
  <param name="swirec_normal_cpu_start">
     <value>15</value>
  </param>

  <!-- Defines an approximate usage percentage as &quot;busy&quot; CPU load. 
       When usage is busy, the recognizer does not use extra CPU
       to refine its results. -->
  <param name="swirec_busy_cpu_start">
     <value>40</value>
  </param>

  <!-- Defines an approximate usage percentage as &quot;maxium&quot; CPU load. 
       When usage is pegged, the recognizer minimizes CPU usage. -->
  <param name="swirec_pegged_cpu_start">
     <value>101</value>
  </param>

  <!-- The maximum number of candidates to consider when attempting
       to fill the nbest list.  This is not the preferred way to control
       nbest processing and should only be set small when there is a specific
       reason each sentence is very expensive (like a computationally intense
       ECMAscript).  Otherwise accuracy and confidence can be seriously impaired
       for no reason. By default (value of 99999999) this parameter has no effect.
       This parameter can also be set via SetParameter or a &lt;meta&gt; in a grammar. -->
  <param name="swirec_max_sentences_tried">
     <value>999999</value>
  </param>

  <!-- This is the main search parameter guiding the Viterbi beam search. 
       It is used to prune all active paths. These are paths either active 
       during Hmm state propagation or paths active during FSM state propagation. -->
  <param name="swirec_state_beam">
     <value>0</value>
     <value>-15</value>
     <value>-45</value>
     <value>-45</value>
  </param>

  <!-- This is equivalent to the above state_beam, but for the parallel 
       deocding of the GSM only. -->
  <param name="swirec_gsm_state_beam">
     <value>-50</value>
  </param>

  <!-- This determines the vocab threshold that decides whether we use the full or small
       gsm. However, we always use the small gsm in busy -->
  <param name="swirec_gsm_vocab_size_threshold">
     <value>100</value>
  </param>

  <!-- Determines how much the phoneme look-ahead influences the Viterbi beam search. 
       Typically this parameter is set to match the beam search parameter. 
       Conceivably a better trade-off can be achieved by using a tighter beam 
       for the phoneme look-ahead compared to the main Viterbi beam. -->
  <param name="swirec_phoneme_lookahead_beam">
     <value>-30</value>
     <value>-45</value>
     <value>-60</value>
     <value>-60</value>
  </param>

  <!-- Determines how much to reduce the state beam when the current best path i
       ends in a silence model. This effectively reduces the search space by 
       tighter pruning when the search is confident of being in a silence region. -->
  <param name="swirec_silence_prune_offset">
     <value>56</value>
     <value>56</value>
     <value>56</value>
     <value>56</value>
  </param>

  <!-- Maximum number of FSM arcs that can be active at any time. This parameter 
       is used to guide the histogram pruning algorithm that dynamically adjusts 
       the state beam to ensure the total number of active arcs does not 
       exceed swirec_max_arcs. -->
  <param name="swirec_max_arcs">
    <value>10000</value>
    <value>6000</value>
    <value>3000</value>
    <value>3000</value>
  </param>

  <!-- For Nuance use only. The word beam applies only at word endings. The 
       hypothesis is that search paths at end of words can be pruned tighter than 
       other paths, without loss of accuracy. -->
  <param name="swirec_word_beam">
    <value>-50</value>
  </param>

  <!-- For Nuance use only.  Penalty for self loop transitions in the Hmm model -->
  <param name="swirec_loop_penalty">
    <value>0.3</value>
  </param>

  <!-- For Nuance use only.  Penalty for next state transition in Hmm model. -->
  <param name="swirec_next_penalty">
    <value>0.2</value>
  </param>

  <!-- For Nuance use only.  Penalty to skip a Hmm state. -->
  <param name="swirec_skip_penalty">
    <value>0.6</value>
  </param>

  <!-- For Nuance use only.  Penalty for entering silence model. -->
  <param name="swirec_pause_penalty">
    <value>0.6</value>
  </param>

  <!-- For Nuance use only.  Self loop penalty for the Hmm silence state. -->
  <param name="swirec_silence_penalty">
    <value>0.0</value>
  </param>

  <!-- For Nuance use only.  Penalty for entering a whole word unit model. -->
  <param name="swirec_whole_word_unit_penalty">
    <value>2.0</value>
  </param>

  <!-- For Nuance use only.  Word transition penalty. -->
  <param name="swirec_word_penalty">
    <value>1.0</value>
  </param>

  <!-- For Nuance use only.  Start-of-sentence cost. -->
  <param name="swirec_sentence_initial_cost">
     <value>1.0</value>
  </param>

  <!-- For Nuance use only. Forward search forces a
       model restart if this number of frames have passed -->
  <param name="swirec_restart_neighborhood">
    <value>25</value>
  </param>

  <!-- For Nuance use only. Generate lattice states for 
       one frame over two; value 0 is turn off -->
  <param name="swirec_lattice_decimation">
    <value>0</value>
  </param>

  <!-- For Nuance use only: Phonetic Pruning activation -->
  <param name="swirec_ppr_active">
    <value>1</value>
  </param>

  <!-- For Nuance use only. 
       threshold of phone posterior to prune start arc  -->
  <param name="swirec_ppr_start_thres">
    <value>0.00001</value>
  </param>

  <!-- For Nuance use only. 
       threshold of phone posterior to prune existing arc  -->
  <param name="swirec_ppr_exist_thres">
    <value>0.0</value>
  </param>

  <!-- For Nuance use only. 
       maximum threshold of phone posterior to prune arc after correction
       based on position in the beam  -->
  <param name="swirec_ppr_max_thres">
    <value>0.01</value>
  </param>

  <!-- For Nuance use only. 
       Scaling factor use to correct the ppr threshold -->
  <param name="swirec_ppr_thres_scale_factor">
    <value>170.667</value>
  </param>


  <!-- For Nuance use only.  Whether to share contents of public rules referenced by other public
       rules. Turning on speeds grammar compilation and lowers compiled memory
       size but results in recognition-time CPU increase. -->
  <param name="swirec_shared_publics">
     <value>0</value>
  </param>

  <!-- For Nuance use only. Max number of nodes that can be visited during the astar search
       before it is aborted -->
  <param name="swirec_astar_max_paths">
     <value>100000</value>
  </param>

  <!-- Turning on causes an implicit-root (of all grammar publics) to
       be defined if an explicit root rule is not declared in the grammar.  
       Note that this behavior does not seem to be compatible with 
       the relevant w3c specifications. -->
  <param name="swirec_compute_implicit_root">
     <value>0</value>
  </param>

  <!-- ***************************************************************** -->
  <!-- * Parameters related to DEBUGGING                               * -->
  <!-- ***************************************************************** -->

  <!-- Maximum n-best entries logged in event log. -->
  <param name="swirec_max_logged_nbest">
     <value>2</value>
  </param>

  <!-- For Nuance use only. Turns on/off the writing of a computation statistics 
       file. These statistics show the amounts of time spent during various
       recognition steps. -->
  <param name="swirec_save_comp_stats">
     <value>0</value>
  </param>

  <!-- Disable post-endpointed waveform logging entirely. -->
  <param name="swirec_suppress_waveform_logging">
     <value>0</value>
  </param>

  <!-- Disable logging of recognition events. -->
  <param name="swirec_suppress_event_logging">
     <value>0</value>
  </param>

  <!-- Current recognition should be treated as sensitive information
       and thus suppressed according to suppression rules. -->
  <param name="secure_context">
     <value>0</value>
  </param>
  
  <!-- Suppressed sensitive information from URI according to suppression
       rules. Not settable at runtime. Default to '0' (do not suppress) -->
  <param name="secure_context_uri">
     <value>0</value>
  </param>

  <!-- Max channels to simultaneously save waveforms. -->
  <param name="swirec_waveform_logging_max_channels">
     <value>-1</value>
  </param>

  <!-- Timeout (seconds) for inactive channel when max_channels
       is set, Specifies the number of seconds during which a rec 
       handle must be idle in order to be considered inactive and 
       therefore not logging any waveforms -->
  <param name="swirec_waveform_logging_channel_timeout">
     <value>300</value>
  </param>

  <!-- Allows/disallows obtaining waveforms by calling SWIrecGetWaveform() -->
  <param name="swirec_return_waveform">
     <value>1</value>
  </param>

  <!-- Length of leading silence (msecs) in returned waveform 
       when calling SWIrecGetWaveformEx with 'begin' silence_suppression -->
  <param name="swirec_waveform_begin_silence">
     <value>0</value>
  </param>

  <!-- Length of trailing silence (msecs) in returned waveform 
       when calling SWIrecGetWaveformEx with 'end' silence_suppression -->
  <param name="swirec_waveform_end_silence">
     <value>0</value>
  </param>

  <!-- Maximum length of interword silence (msecs) in returned waveform 
       when calling SWIrecGetWaveformEx with 'interword' silence_suppression -->
  <param name="swirec_waveform_interword_max">
     <value>0</value>
  </param>

  <!-- Percentage of the maximum waveform amplitude to be used
       as threshold for detecting speech -->
  <param name="swirec_waveform_speech_thresh">
     <value>10.0</value>
  </param>

  <!-- Safety margin (msecs) extending the BOS and EOS in the waveform -->
  <param name="swirec_waveform_speech_backoff">
     <value>50</value>
  </param>


</lang>

</SWIrecConfig>
