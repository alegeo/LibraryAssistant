package iristk.speech.cereproc;
import com.ochafik.lang.jnaerator.runtime.LibraryExtractor;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
/**
 * JNA Wrapper for library <b>cerevoice_eng</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface Cerevoice_Library extends Library {
	public static final String JNA_LIBRARY_NAME = LibraryExtractor.getLibraryPath("libcerevoice_shared-3", true, iristk.speech.cereproc.Cerevoice_Library.class);
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(iristk.speech.cereproc.Cerevoice_Library.JNA_LIBRARY_NAME, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);
	public static final Cerevoice_Library INSTANCE = (Cerevoice_Library)Native.loadLibrary(iristk.speech.cereproc.Cerevoice_Library.JNA_LIBRARY_NAME, iristk.speech.cereproc.Cerevoice_Library.class, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);

	CPRC_abuf_trans CPRC_abuf_get_trans(Pointer ab, int i);
	/**
	 * Return the size of the transcription data<br>
	 * Original signature : <code>int CPRC_abuf_trans_sz(CPRC_abuf*)</code><br>
	 * <i>native declaration : line 531</i>
	 */
	int CPRC_abuf_trans_sz(Pointer ab);
	/**
	 * Return the name of the transcription element <br>
	 * Returns an empty string if there has been an error.<br>
	 * Original signature : <code>char* CPRC_abuf_trans_name(const CPRC_abuf_trans*)</code><br>
	 * <i>native declaration : line 537</i>
	 */
	String  CPRC_abuf_trans_name(CPRC_abuf_trans t);
	/**
	 * Return the type of the transcription element<br>
	 * Returns CPRC_ABUF_TRANS_ERROR if there has been an error.<br>
	 * Original signature : <code>CPRC_ABUF_TRANS CPRC_abuf_trans_type(const CPRC_abuf_trans*)</code><br>
	 * <i>native declaration : line 543</i>
	 */
	/**
	 * @see CPRC_ABUF_TRANS
	 */int CPRC_abuf_trans_type(CPRC_abuf_trans t);
	/**
	 * Return start time (in seconds) of a transcription element <br>
	 * Returns -1.0 if there has been an error.<br>
	 * Original signature : <code>float CPRC_abuf_trans_start(const CPRC_abuf_trans*)</code><br>
	 * <i>native declaration : line 549</i>
	 */
	float CPRC_abuf_trans_start(CPRC_abuf_trans t);
	/**
	 * Return end time (in seconds) of a transcription element <br>
	 * Returns -1.0 if there has been an error.<br>
	 * Original signature : <code>float CPRC_abuf_trans_end(const CPRC_abuf_trans*)</code><br>
	 * <i>native declaration : line 555</i>
	 */
	float CPRC_abuf_trans_end(CPRC_abuf_trans t);
	/**
	 * Get length of the audio data in an audio buffer<br>
	 * Original signature : <code>int CPRC_abuf_wav_sz(CPRC_abuf*)</code><br>
	 * <i>native declaration : line 561</i>
	 */
	int CPRC_abuf_wav_sz(Pointer ab);
	/**
	 * Get a single sample from the audio data <br>
	 * Returns 0 if the index i is out of bounds<br>
	 * Original signature : <code>CPRC_abuf_wav(CPRC_abuf*, int)</code><br>
	 * <i>native declaration : line 566</i>
	 */
	int CPRC_abuf_wav(Pointer ab, int i);
	/**
	 * Get a pointer to the raw audio data<br>
	 * Original signature : <code>* CPRC_abuf_wav_data(CPRC_abuf*)</code><br>
	 * <i>native declaration : line 570</i>
	 */
	//byte[] CPRC_abuf_wav_data(Pointer ab);
	Pointer CPRC_abuf_wav_data(Pointer ab);
	/**
	 * Get the sample rate of the audio buffer <br>
	 * The CPRCEN_engine_get_voice_info() and CPRCEN_channel_get_voice_info() <br>
	 * functions should normally be used to access voice-releated sample rate<br>
	 * information, as the audio buffer sample rate is changed to match the voice <br>
	 * (if necessary) at synthesis time.<br>
	 * Original signature : <code>int CPRC_abuf_wav_srate(CPRC_abuf*)</code><br>
	 * <i>native declaration : line 579</i>
	 */
	int CPRC_abuf_wav_srate(Pointer ab);
	/**
	 * Make a copy of an audio buffer <br>
	 * Make a copy of an audio buffer.  Useful if the user wishes to process<br>
	 * audio on a separate thread and allow the callback to continue.<br>
	 * Original signature : <code>CPRC_abuf* CPRC_abuf_copy(CPRC_abuf*)</code><br>
	 * <i>native declaration : line 629</i>
	 */
	Pointer CPRC_abuf_copy(Pointer ab);
	/**
	 * Delete an audio buffer<br>
	 * Clean up an audio buffer.  If a user creates a buffer with<br>
	 * CPRC_abuf_copy(), they should delete it with this function when<br>
	 * finished processing.<br>
	 * Original signature : <code>void CPRC_abuf_delete(CPRC_abuf*)</code><br>
	 * <i>native declaration : line 637</i>
	 */
	void CPRC_abuf_delete(Pointer ab);

}
