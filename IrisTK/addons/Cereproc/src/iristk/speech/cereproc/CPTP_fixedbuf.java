package iristk.speech.cereproc;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
/**
 * Generic fixed buffer structure<br>
 * <i>native declaration : line 160</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CPTP_fixedbuf extends Structure<CPTP_fixedbuf, CPTP_fixedbuf.ByValue, CPTP_fixedbuf.ByReference > {
	/// Size of the buffer
	public int _size;
	/**
	 * Byte sequence<br>
	 * C type : byte*
	 */
	public Pointer _buffer;
	public CPTP_fixedbuf() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new java.lang.String[]{"_size", "_buffer"});
	}
	/**
	 * @param _size Size of the buffer<br>
	 * @param _buffer Byte sequence<br>
	 * C type : byte*
	 */
	public CPTP_fixedbuf(int _size, Pointer _buffer) {
		super();
		this._size = _size;
		this._buffer = _buffer;
		initFieldOrder();
	}
	@Override
	protected ByReference newByReference() { return new ByReference(); }
	@Override
	protected ByValue newByValue() { return new ByValue(); }
	@Override
	protected CPTP_fixedbuf newInstance() { return new CPTP_fixedbuf(); }
	public static CPTP_fixedbuf[] newArray(int arrayLength) {
		return Structure.newArray(CPTP_fixedbuf.class, arrayLength);
	}
	public static class ByReference extends CPTP_fixedbuf implements Structure.ByReference {
		
	};
	public static class ByValue extends CPTP_fixedbuf implements Structure.ByValue {
		
	};
}
