//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by jni4net. See http://jni4net.sourceforge.net/ 
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace iristk.speech.windows {
    
    
    #region Component Designer generated code 
    public partial class IResultListener_ {
        
        public static global::java.lang.Class _class {
            get {
                return global::iristk.speech.windows.@__IResultListener.staticClass;
            }
        }
    }
    #endregion
    
    #region Component Designer generated code 
    [global::net.sf.jni4net.attributes.JavaProxyAttribute(typeof(global::iristk.speech.windows.IResultListener), typeof(global::iristk.speech.windows.IResultListener_))]
    [global::net.sf.jni4net.attributes.ClrWrapperAttribute(typeof(global::iristk.speech.windows.IResultListener), typeof(global::iristk.speech.windows.IResultListener_))]
    internal sealed partial class @__IResultListener : global::java.lang.Object, global::iristk.speech.windows.IResultListener {
        
        internal new static global::java.lang.Class staticClass;
        
        internal static global::net.sf.jni4net.jni.MethodId j4n_speechDetected0;
        
        internal static global::net.sf.jni4net.jni.MethodId j4n_recognizeCompleted1;
        
        internal static global::net.sf.jni4net.jni.MethodId j4n_recognizeHypothesis2;
        
        private @__IResultListener(global::net.sf.jni4net.jni.JNIEnv @__env) : 
                base(@__env) {
        }
        
        private static void InitJNI(global::net.sf.jni4net.jni.JNIEnv @__env, java.lang.Class @__class) {
            global::iristk.speech.windows.@__IResultListener.staticClass = @__class;
            global::iristk.speech.windows.@__IResultListener.j4n_speechDetected0 = @__env.GetMethodID(global::iristk.speech.windows.@__IResultListener.staticClass, "speechDetected", "(I)V");
            global::iristk.speech.windows.@__IResultListener.j4n_recognizeCompleted1 = @__env.GetMethodID(global::iristk.speech.windows.@__IResultListener.staticClass, "recognizeCompleted", "(Liristk/speech/windows/Result;)V");
            global::iristk.speech.windows.@__IResultListener.j4n_recognizeHypothesis2 = @__env.GetMethodID(global::iristk.speech.windows.@__IResultListener.staticClass, "recognizeHypothesis", "(Liristk/speech/windows/Result;)V");
        }
        
        public void speechDetected(int audioLevel) {
            global::net.sf.jni4net.jni.JNIEnv @__env = this.Env;
            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 12)){
            @__env.CallVoidMethod(this, global::iristk.speech.windows.@__IResultListener.j4n_speechDetected0, global::net.sf.jni4net.utils.Convertor.ParPrimC2J(audioLevel));
            }
        }
        
        public void recognizeCompleted(global::iristk.speech.windows.Result result) {
            global::net.sf.jni4net.jni.JNIEnv @__env = this.Env;
            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 12)){
            @__env.CallVoidMethod(this, global::iristk.speech.windows.@__IResultListener.j4n_recognizeCompleted1, global::net.sf.jni4net.utils.Convertor.ParStrongC2Jp<global::iristk.speech.windows.Result>(@__env, result));
            }
        }
        
        public void recognizeHypothesis(global::iristk.speech.windows.Result result) {
            global::net.sf.jni4net.jni.JNIEnv @__env = this.Env;
            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 12)){
            @__env.CallVoidMethod(this, global::iristk.speech.windows.@__IResultListener.j4n_recognizeHypothesis2, global::net.sf.jni4net.utils.Convertor.ParStrongC2Jp<global::iristk.speech.windows.Result>(@__env, result));
            }
        }
        
        private static global::System.Collections.Generic.List<global::net.sf.jni4net.jni.JNINativeMethod> @__Init(global::net.sf.jni4net.jni.JNIEnv @__env, global::java.lang.Class @__class) {
            global::System.Type @__type = typeof(__IResultListener);
            global::System.Collections.Generic.List<global::net.sf.jni4net.jni.JNINativeMethod> methods = new global::System.Collections.Generic.List<global::net.sf.jni4net.jni.JNINativeMethod>();
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(@__type, "speechDetected", "speechDetected0", "(I)V"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(@__type, "recognizeCompleted", "recognizeCompleted1", "(Liristk/speech/windows/Result;)V"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(@__type, "recognizeHypothesis", "recognizeHypothesis2", "(Liristk/speech/windows/Result;)V"));
            return methods;
        }
        
        private static void speechDetected0(global::System.IntPtr @__envp, global::net.sf.jni4net.utils.JniLocalHandle @__obj, int audioLevel) {
            // (I)V
            // (I)V
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.Wrap(@__envp);
            try {
            global::iristk.speech.windows.IResultListener @__real = global::net.sf.jni4net.utils.Convertor.FullJ2C<global::iristk.speech.windows.IResultListener>(@__env, @__obj);
            @__real.speechDetected(audioLevel);
            }catch (global::System.Exception __ex){@__env.ThrowExisting(__ex);}
        }
        
        private static void recognizeCompleted1(global::System.IntPtr @__envp, global::net.sf.jni4net.utils.JniLocalHandle @__obj, global::net.sf.jni4net.utils.JniLocalHandle result) {
            // (Liristk/speech/windows/Result;)V
            // (Liristk/speech/windows/Result;)V
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.Wrap(@__envp);
            try {
            global::iristk.speech.windows.IResultListener @__real = global::net.sf.jni4net.utils.Convertor.FullJ2C<global::iristk.speech.windows.IResultListener>(@__env, @__obj);
            @__real.recognizeCompleted(global::net.sf.jni4net.utils.Convertor.StrongJp2C<global::iristk.speech.windows.Result>(@__env, result));
            }catch (global::System.Exception __ex){@__env.ThrowExisting(__ex);}
        }
        
        private static void recognizeHypothesis2(global::System.IntPtr @__envp, global::net.sf.jni4net.utils.JniLocalHandle @__obj, global::net.sf.jni4net.utils.JniLocalHandle result) {
            // (Liristk/speech/windows/Result;)V
            // (Liristk/speech/windows/Result;)V
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.Wrap(@__envp);
            try {
            global::iristk.speech.windows.IResultListener @__real = global::net.sf.jni4net.utils.Convertor.FullJ2C<global::iristk.speech.windows.IResultListener>(@__env, @__obj);
            @__real.recognizeHypothesis(global::net.sf.jni4net.utils.Convertor.StrongJp2C<global::iristk.speech.windows.Result>(@__env, result));
            }catch (global::System.Exception __ex){@__env.ThrowExisting(__ex);}
        }
        
        new internal sealed class ContructionHelper : global::net.sf.jni4net.utils.IConstructionHelper {
            
            public global::net.sf.jni4net.jni.IJvmProxy CreateProxy(global::net.sf.jni4net.jni.JNIEnv @__env) {
                return new global::iristk.speech.windows.@__IResultListener(@__env);
            }
        }
    }
    #endregion
}
